import { __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova, checkAvailability, cordovaPropertyGet, cordovaPropertySet } from '@ionic-native/core';
import { Observable, merge } from 'rxjs';
import * as ɵngcc0 from '@angular/core';
export var Connection;
(function (Connection) {
    Connection[Connection["UNKNOWN"] = 0] = "UNKNOWN";
    Connection[Connection["ETHERNET"] = 1] = "ETHERNET";
    Connection[Connection["WIFI"] = 2] = "WIFI";
    Connection[Connection["CELL_2G"] = 3] = "CELL_2G";
    Connection[Connection["CELL_3G"] = 4] = "CELL_3G";
    Connection[Connection["CELL_4G"] = 5] = "CELL_4G";
    Connection[Connection["CELL"] = 6] = "CELL";
    Connection[Connection["NONE"] = 7] = "NONE";
})(Connection || (Connection = {}));
var Network = /** @class */ (function (_super) {
    __extends(Network, _super);
    function Network() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * Constants for possible connection types
         */
        _this.Connection = {
            UNKNOWN: 'unknown',
            ETHERNET: 'ethernet',
            WIFI: 'wifi',
            CELL_2G: '2g',
            CELL_3G: '3g',
            CELL_4G: '4g',
            CELL: 'cellular',
            NONE: 'none',
        };
        return _this;
    }
    Network.prototype.onChange = function () {
        var _this = this;
        return (function () {
            if (checkAvailability(_this) === true) {
                return merge(_this.onConnect(), _this.onDisconnect());
            }
        })();
    };
    Network.prototype.onDisconnect = function () { return cordova(this, "onDisconnect", { "eventObservable": true, "event": "offline", "element": "document" }, arguments); };
    Network.prototype.onConnect = function () { return cordova(this, "onConnect", { "eventObservable": true, "event": "online", "element": "document" }, arguments); };
    Object.defineProperty(Network.prototype, "type", {
        get: function () { return cordovaPropertyGet(this, "type"); },
        set: function (value) { cordovaPropertySet(this, "type", value); },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Network.prototype, "downlinkMax", {
        get: function () { return cordovaPropertyGet(this, "downlinkMax"); },
        set: function (value) { cordovaPropertySet(this, "downlinkMax", value); },
        enumerable: false,
        configurable: true
    });
    Network.pluginName = "Network";
    Network.plugin = "cordova-plugin-network-information";
    Network.pluginRef = "navigator.connection";
    Network.repo = "https://github.com/apache/cordova-plugin-network-information";
    Network.platforms = ["Amazon Fire OS", "Android", "Browser", "iOS", "Windows"];
Network.ɵfac = function Network_Factory(t) { return ɵNetwork_BaseFactory(t || Network); };
Network.ɵprov = ɵngcc0.ɵɵdefineInjectable({ token: Network, factory: function (t) { return Network.ɵfac(t); } });
var ɵNetwork_BaseFactory = /*@__PURE__*/ ɵngcc0.ɵɵgetInheritedFactory(Network);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(Network, [{
        type: Injectable
    }], null, null); })();
    return Network;
}(IonicNativePlugin));
export { Network };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3NyYy9AaW9uaWMtbmF0aXZlL3BsdWdpbnMvbmV0d29yay9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyx5RkFBcUUsTUFBTSxvQkFBb0IsQ0FBQztBQUN2RyxPQUFPLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLE1BQU0sQ0FBQzs7QUFJekMsTUFBTSxDQUFOLElBQVksVUFTWDtBQVRELFdBQVksVUFBVTtBQUNyQixJQUFDLGlEQUFXLENBQUE7QUFBQyxJQUNaLG1EQUFRLENBQUE7QUFBQyxJQUNULDJDQUFJLENBQUE7QUFBQyxJQUNMLGlEQUFPLENBQUE7QUFBQyxJQUNSLGlEQUFPLENBQUE7QUFBQyxJQUNSLGlEQUFPLENBQUE7QUFBQyxJQUNSLDJDQUFJLENBQUE7QUFBQyxJQUNMLDJDQUFJLENBQUE7QUFDTixDQUFDLEVBVFcsVUFBVSxLQUFWLFVBQVUsUUFTckI7QUFDRDtBQUcyQixJQWlERSwyQkFBaUI7QUFBQztBQUU5QjtBQUlkLFFBTEQ7QUFDRjtBQUVBLFdBREs7QUFDTCxRQUFFLGdCQUFVLEdBQUc7QUFDZixZQUFJLE9BQU8sRUFBRSxTQUFTO0FBQ3RCLFlBQUksUUFBUSxFQUFFLFVBQVU7QUFDeEIsWUFBSSxJQUFJLEVBQUUsTUFBTTtBQUNoQixZQUFJLE9BQU8sRUFBRSxJQUFJO0FBQ2pCLFlBQUksT0FBTyxFQUFFLElBQUk7QUFDakIsWUFBSSxPQUFPLEVBQUUsSUFBSTtBQUNqQixZQUFJLElBQUksRUFBRSxVQUFVO0FBQ3BCLFlBQUksSUFBSSxFQUFFLE1BQU07QUFDaEIsU0FBRyxDQUFDO0FBQ0o7QUFFZTtBQUNmLElBZUUsMEJBQVE7QUFBaUI7QUFDTjtBQUE4QixtREFEckI7QUFDOUIsZ0JBQUksT0FBTyxLQUFLLENBQUMsS0FBSSxDQUFDLFNBQVMsRUFBRSxFQUFFLEtBQUksQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDO0FBQ3hELGFBQUc7QUFDSDtBQUVPO0FBQU8sSUFRWiw4QkFBWTtBQU1vQyxJQU9oRCwyQkFBUztBQUlzRiwwQkEzQzVFLHlCQUFJO0FBQUk7QUFNdkI7QUFHMkI7QUFDNUI7QUFDSjtBQUNFLDBCQU5rQixnQ0FBVztBQUFJO0FBSTFCO0FBSUo7QUFBMkI7QUFDOUI7QUFHSDtBQUFvQztBQUNZO0FBRzFCO0FBSU07MkNBOUMzQixVQUFVOzs7OzswQkFDTDtBQUFDLGtCQXBFUDtBQUFFLEVBb0UyQixpQkFBaUI7QUFDN0MsU0FEWSxPQUFPO0FBQUkiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBDb3Jkb3ZhQ2hlY2ssIENvcmRvdmFQcm9wZXJ0eSwgSW9uaWNOYXRpdmVQbHVnaW4sIFBsdWdpbiB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBtZXJnZSB9IGZyb20gJ3J4anMnO1xuXG5kZWNsYXJlIGNvbnN0IG5hdmlnYXRvcjogYW55O1xuXG5leHBvcnQgZW51bSBDb25uZWN0aW9uIHtcbiAgVU5LTk9XTiA9IDAsXG4gIEVUSEVSTkVULFxuICBXSUZJLFxuICBDRUxMXzJHLFxuICBDRUxMXzNHLFxuICBDRUxMXzRHLFxuICBDRUxMLFxuICBOT05FLFxufVxuXG4vKipcbiAqIEBuYW1lIE5ldHdvcmtcbiAqIEBwcmVtaWVyIG5ldHdvcmstaW5mb3JtYXRpb25cbiAqIEBkZXNjcmlwdGlvblxuICogUmVxdWlyZXMgQ29yZG92YSBwbHVnaW46IGNvcmRvdmEtcGx1Z2luLW5ldHdvcmstaW5mb3JtYXRpb24uIEZvciBtb3JlIGluZm8sIHBsZWFzZSBzZWUgdGhlIFtOZXR3b3JrIHBsdWdpbiBkb2NzXShodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLW5ldHdvcmstaW5mb3JtYXRpb24pLlxuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgTmV0d29yayB9IGZyb20gJ0Bpb25pYy1uYXRpdmUvbmV0d29yay9uZ3gnO1xuICpcbiAqIGNvbnN0cnVjdG9yKHByaXZhdGUgbmV0d29yazogTmV0d29yaykgeyB9XG4gKlxuICogLi4uXG4gKlxuICogLy8gd2F0Y2ggbmV0d29yayBmb3IgYSBkaXNjb25uZWN0aW9uXG4gKiBsZXQgZGlzY29ubmVjdFN1YnNjcmlwdGlvbiA9IHRoaXMubmV0d29yay5vbkRpc2Nvbm5lY3QoKS5zdWJzY3JpYmUoKCkgPT4ge1xuICogICBjb25zb2xlLmxvZygnbmV0d29yayB3YXMgZGlzY29ubmVjdGVkIDotKCcpO1xuICogfSk7XG4gKlxuICogLy8gc3RvcCBkaXNjb25uZWN0IHdhdGNoXG4gKiBkaXNjb25uZWN0U3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gKlxuICpcbiAqIC8vIHdhdGNoIG5ldHdvcmsgZm9yIGEgY29ubmVjdGlvblxuICogbGV0IGNvbm5lY3RTdWJzY3JpcHRpb24gPSB0aGlzLm5ldHdvcmsub25Db25uZWN0KCkuc3Vic2NyaWJlKCgpID0+IHtcbiAqICAgY29uc29sZS5sb2coJ25ldHdvcmsgY29ubmVjdGVkIScpO1xuICogICAvLyBXZSBqdXN0IGdvdCBhIGNvbm5lY3Rpb24gYnV0IHdlIG5lZWQgdG8gd2FpdCBicmllZmx5XG4gKiAgICAvLyBiZWZvcmUgd2UgZGV0ZXJtaW5lIHRoZSBjb25uZWN0aW9uIHR5cGUuIE1pZ2h0IG5lZWQgdG8gd2FpdC5cbiAqICAgLy8gcHJpb3IgdG8gZG9pbmcgYW55IGFwaSByZXF1ZXN0cyBhcyB3ZWxsLlxuICogICBzZXRUaW1lb3V0KCgpID0+IHtcbiAqICAgICBpZiAodGhpcy5uZXR3b3JrLnR5cGUgPT09ICd3aWZpJykge1xuICogICAgICAgY29uc29sZS5sb2coJ3dlIGdvdCBhIHdpZmkgY29ubmVjdGlvbiwgd29vaG9vIScpO1xuICogICAgIH1cbiAqICAgfSwgMzAwMCk7XG4gKiB9KTtcbiAqXG4gKiAvLyBzdG9wIGNvbm5lY3Qgd2F0Y2hcbiAqIGNvbm5lY3RTdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAqXG4gKiBgYGBcbiAqIEBhZHZhbmNlZFxuICogVGhlIGB0eXBlYCBwcm9wZXJ0eSB3aWxsIHJldHVybiBvbmUgb2YgdGhlIGZvbGxvd2luZyBjb25uZWN0aW9uIHR5cGVzOiBgdW5rbm93bmAsIGBldGhlcm5ldGAsIGB3aWZpYCwgYDJnYCwgYDNnYCwgYDRnYCwgYGNlbGx1bGFyYCwgYG5vbmVgXG4gKi9cbkBQbHVnaW4oe1xuICBwbHVnaW5OYW1lOiAnTmV0d29yaycsXG4gIHBsdWdpbjogJ2NvcmRvdmEtcGx1Z2luLW5ldHdvcmstaW5mb3JtYXRpb24nLFxuICBwbHVnaW5SZWY6ICduYXZpZ2F0b3IuY29ubmVjdGlvbicsXG4gIHJlcG86ICdodHRwczovL2dpdGh1Yi5jb20vYXBhY2hlL2NvcmRvdmEtcGx1Z2luLW5ldHdvcmstaW5mb3JtYXRpb24nLFxuICBwbGF0Zm9ybXM6IFsnQW1hem9uIEZpcmUgT1MnLCAnQW5kcm9pZCcsICdCcm93c2VyJywgJ2lPUycsICdXaW5kb3dzJ10sXG59KVxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5ldHdvcmsgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBDb25zdGFudHMgZm9yIHBvc3NpYmxlIGNvbm5lY3Rpb24gdHlwZXNcbiAgICovXG4gIENvbm5lY3Rpb24gPSB7XG4gICAgVU5LTk9XTjogJ3Vua25vd24nLFxuICAgIEVUSEVSTkVUOiAnZXRoZXJuZXQnLFxuICAgIFdJRkk6ICd3aWZpJyxcbiAgICBDRUxMXzJHOiAnMmcnLFxuICAgIENFTExfM0c6ICczZycsXG4gICAgQ0VMTF80RzogJzRnJyxcbiAgICBDRUxMOiAnY2VsbHVsYXInLFxuICAgIE5PTkU6ICdub25lJyxcbiAgfTtcblxuICAvKipcbiAgICogQ29ubmVjdGlvbiB0eXBlXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIEBDb3Jkb3ZhUHJvcGVydHkoKSB0eXBlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIERvd25saW5rIE1heCBTcGVlZFxuICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAqL1xuICBAQ29yZG92YVByb3BlcnR5KCkgZG93bmxpbmtNYXg6IHN0cmluZztcblxuICAvKipcbiAgICogUmV0dXJucyBhbiBvYnNlcnZhYmxlIHRvIHdhdGNoIGNvbm5lY3Rpb24gY2hhbmdlc1xuICAgKiBAcmV0dXJuIHtPYnNlcnZhYmxlPGFueT59XG4gICAqL1xuICBAQ29yZG92YUNoZWNrKClcbiAgb25DaGFuZ2UoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gbWVyZ2UodGhpcy5vbkNvbm5lY3QoKSwgdGhpcy5vbkRpc2Nvbm5lY3QoKSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IG5vdGlmaWVkIHdoZW4gdGhlIGRldmljZSBnb2VzIG9mZmxpbmVcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gUmV0dXJucyBhbiBvYnNlcnZhYmxlLlxuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIGV2ZW50T2JzZXJ2YWJsZTogdHJ1ZSxcbiAgICBldmVudDogJ29mZmxpbmUnLFxuICAgIGVsZW1lbnQ6IGRvY3VtZW50LFxuICB9KVxuICBvbkRpc2Nvbm5lY3QoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogR2V0IG5vdGlmaWVkIHdoZW4gdGhlIGRldmljZSBnb2VzIG9ubGluZVxuICAgKiBAcmV0dXJucyB7T2JzZXJ2YWJsZTxhbnk+fSBSZXR1cm5zIGFuIG9ic2VydmFibGUuXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgZXZlbnRPYnNlcnZhYmxlOiB0cnVlLFxuICAgIGV2ZW50OiAnb25saW5lJyxcbiAgICBlbGVtZW50OiBkb2N1bWVudCxcbiAgfSlcbiAgb25Db25uZWN0KCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=